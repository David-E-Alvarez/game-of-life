{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["newBoardStatus","cellStatus","arguments","length","undefined","Math","random","grid","r","row","c","push","BoardGrid","_ref","boardStatus","onToggleCellStatus","tr","_loop","td","_loop2","react_default","a","createElement","key","concat","className","onClick","handleClick","App","state","handleNewBoard","_this","setState","prevState","clearBoard","toggleCellStatus","toggleBoardStatus","tempBoardStatus","Object","toConsumableArray","this","App_BoardGrid","type","handleStart","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAKMA,EAAiB,WAEtB,IAFmE,IAA5CC,EAA4CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA/B,kBAAMG,KAAKC,SAAW,KACpDC,EAAO,GACJC,EAAI,EAAGA,EALM,GAKcA,IAAK,CAExC,IADA,IAAMC,EAAM,GACHC,EAAI,EAAGA,EANQ,GAMeA,IACtCD,EAAIE,KAAKV,KAEVM,EAAKI,KAAKF,GAEX,OAAOF,GAGFK,EAAY,SAAAC,GAAyC,IAAtCC,EAAsCD,EAAtCC,YAAaC,EAAyBF,EAAzBE,mBAMjC,IADA,IAAMC,EAAK,GAL+CC,EAAA,SAMjDT,GAEN,IADA,IAAMU,EAAK,GAP4CC,EAAA,SAQ9CT,GACPQ,EAAGP,KACCS,EAAAC,EAAAC,cAAA,MACCC,IAAG,GAAAC,OAAKhB,EAAL,KAAAgB,OAAUd,GACnBe,UAAWX,EAAYN,GAAGE,GAAK,QAAU,OACzCgB,QAAS,kBAZb,SAAqBlB,EAAEE,GACtBK,EAAmBP,EAAEE,GAWHiB,CAAYnB,EAAEE,QALrBA,EAAI,EAAGA,EAtBM,GAsBiBA,IAAKS,EAAnCT,GASTM,EAAGL,KAAKS,EAAAC,EAAAC,cAAA,MAAIC,IAAKf,GAAIU,KAXfV,EAAI,EAAGA,EArBM,GAqBcA,IAAKS,EAAhCT,GAaT,OAAOY,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,aAAQN,KA0CRY,6MAtCdC,MAAQ,CAACf,YAAad,OAEtB8B,eAAiB,WAChBC,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAACnB,YAAad,UAG3CkC,WAAa,WACZH,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAACnB,YAAad,EAAe,kBAAM,UAG9DmC,iBAAmB,SAAC3B,EAAEE,GACpB,IAAM0B,EAAoB,SAAAH,GACzB,IAAMI,EAAeC,OAAAC,EAAA,EAAAD,CAAOL,EAAUnB,aAEtC,OADAuB,EAAgB7B,GAAGE,IAAM2B,EAAgB7B,GAAGE,GACrC2B,GAGXN,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAACnB,YAAasB,EAAkBH,+EAGpD,IACAnB,EAAgB0B,KAAKX,MAArBf,YAEL,OACCM,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACmB,EAAD,CACC3B,YAAaA,EACbC,mBAAoByB,KAAKL,mBAExBf,EAAAC,EAAAC,cAAA,UAAQoB,KAAK,SAAShB,QAASc,KAAKV,gBAApC,aACAV,EAAAC,EAAAC,cAAA,UAAQoB,KAAK,SAAShB,QAASc,KAAKN,YAApC,eACAd,EAAAC,EAAAC,cAAA,UAASoB,KAAK,SAAShB,QAASc,KAAKG,aAArC,iBAjCSC,aC3BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.50cc7998.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst totalBoardRows = 40;\nconst totalBoardColumns = 50;\n\nconst newBoardStatus = (cellStatus = () => Math.random() < 0.25) => {\n\tconst grid = [];\n\tfor (let r = 0; r < totalBoardRows; r++) {\n\t\tconst row = [];\n\t\tfor (let c = 0; c < totalBoardColumns; c++) {\n\t\t\trow.push(cellStatus());\n\t\t}\n\t\tgrid.push(row);\n\t}\n\treturn grid;\n};\n\nconst BoardGrid = ({ boardStatus, onToggleCellStatus }) => {\n\tfunction handleClick(r,c) {\n\t\tonToggleCellStatus(r,c);\n\t}\n\n\tconst tr = [];\n\tfor (let r = 0; r < totalBoardRows; r++) {\n  \t\tconst td = [];\n  \t\tfor (let c = 0; c < totalBoardColumns; c++) {\n    \t\ttd.push(\n\t\t        <td\n\t\t        \tkey={`${r},${c}`}\n\t\t\t\t\tclassName={boardStatus[r][c] ? 'alive' : 'dead'}\n\t\t\t\t\tonClick={() => handleClick(r,c)}\n\t\t\t\t/>\n    \t\t);\n  \t\t}\n  \t\ttr.push(<tr key={r}>{td}</tr>);\n\t}\n\treturn <table><tbody>{tr}</tbody></table>;\n};\n\nclass App extends Component {\n\tstate = {boardStatus: newBoardStatus()}\n\n\thandleNewBoard = () => {\n\t\tthis.setState(prevState => ({boardStatus: newBoardStatus()}));\n\t}\n\n\tclearBoard = () => {\n\t\tthis.setState(prevState => ({boardStatus: newBoardStatus(() => false)}));\n\t}\n\n  \ttoggleCellStatus = (r,c) => {\n\t    const toggleBoardStatus = prevState => {\n\t    \tconst tempBoardStatus = [...prevState.boardStatus]\n\t    \ttempBoardStatus[r][c] = !tempBoardStatus[r][c];\n\t    \treturn tempBoardStatus;\n\t    };\n\n\t\tthis.setState(prevState => ({boardStatus: toggleBoardStatus(prevState)}));\n\t}\n\n\trender() {\n\t\tconst { boardStatus } = this.state;\n\n    \treturn (\n    \t\t<div>\n    \t\t\t<h2>Game of Life</h2>\n    \t\t\t<BoardGrid\n    \t\t\t\tboardStatus={boardStatus}\n    \t\t\t\tonToggleCellStatus={this.toggleCellStatus}\n    \t\t\t/>\n\t      \t\t<button type='button' onClick={this.handleNewBoard}>New Board</button>\n\t      \t\t<button type='button' onClick={this.clearBoard}>Clear Board</button>\n\t      \t\t<button  type='button' onClick={this.handleStart}>Start</button>\n      \t\t</div>\n    \t);\n  \t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}