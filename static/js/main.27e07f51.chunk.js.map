{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["totalBoardRows","totalBoardColumns","newBoardStatus","cellStatus","arguments","length","undefined","Math","random","grid","r","c","BoardGrid","_ref","boardStatus","onToggleCellStatus","tr","_loop","td","_loop2","push","react_default","a","createElement","key","concat","className","onClick","handleClick","Slider","_ref2","speed","onSpeedChange","type","min","max","step","value","onChange","e","target","App","state","generation","isGameRunning","runStopButton","_this","handleStop","handleRun","handleClearBoard","setState","handleNewBoard","handleToggleCellStatus","toggleBoardStatus","prevState","clonedBoardStatus","JSON","parse","stringify","handleStep","nextStep","amountTrueNeighbors","reduce","trueNeighbors","neighbor","x","y","totalTrueNeighbors","handleSpeedChange","newSpeed","prevProps","_this2","this","_this$state","speedChanged","gameStarted","gameStopped","clearInterval","timerID","setInterval","_this$state2","App_BoardGrid","App_Slider","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27e07f51.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst totalBoardRows = 40;\nconst totalBoardColumns = 60;\n\nconst newBoardStatus = (cellStatus = () => Math.random() < 0.3) => {\n\tconst grid = [];\n\tfor (let r = 0; r < totalBoardRows; r++) {\n\t\tgrid[r] = [];\n\t\tfor (let c = 0; c < totalBoardColumns; c++) {\n\t\t\tgrid[r][c] = cellStatus();\n\t\t}\n\t}\n\treturn grid;\n};\n\nconst BoardGrid = ({ boardStatus, onToggleCellStatus }) => {\n\tconst handleClick = (r,c) => onToggleCellStatus(r,c);\n\n\tconst tr = [];\n\tfor (let r = 0; r < totalBoardRows; r++) {\n  \t\tconst td = [];\n  \t\tfor (let c = 0; c < totalBoardColumns; c++) {\n    \t\ttd.push(\n\t\t        <td\n\t\t        \tkey={`${r},${c}`}\n\t\t\t\t\tclassName={boardStatus[r][c] ? 'alive' : 'dead'}\n\t\t\t\t\tonClick={() => handleClick(r,c)}\n\t\t\t\t/>\n    \t\t);\n  \t\t}\n  \t\ttr.push(<tr key={r}>{td}</tr>);\n\t}\n\treturn <table><tbody>{tr}</tbody></table>;\n};\n\nconst Slider = ({ speed, onSpeedChange }) => {\n\tconst handleChange = e => onSpeedChange(e.target.value);\n\n\treturn (\n\t\t<input\n\t\t\ttype='range'\n\t\t\tmin='50'\n\t\t\tmax='1000'\n\t\t\tstep='50'\n\t\t\tvalue={speed}\n\t\t\tonChange={handleChange} />\n\t);\n}\n\nclass App extends Component {\n\tstate = {\n\t\tboardStatus: newBoardStatus(),\n\t\tgeneration: 0,\n\t\tisGameRunning: false,\n\t\tspeed: 500\n\t};\n\n\trunStopButton = () => {\n\t\treturn this.state.isGameRunning ?\n\t\t\t<button type='button' onClick={this.handleStop}>Stop</button> :\n\t\t\t<button type='button' onClick={this.handleRun}>Start</button>;\n\t}\n\n\thandleClearBoard = () => {\n\t\tthis.setState({\n\t\t\tboardStatus: newBoardStatus(() => false),\n\t\t\tgeneration: 0\n\t\t});\n\t}\n\n\thandleNewBoard = () => {\n\t\tthis.setState({\n\t\t\tboardStatus: newBoardStatus(),\n\t\t\tgeneration: 0\n\t\t});\n\t}\n\n\thandleToggleCellStatus = (r,c) => {\n\t    const toggleBoardStatus = prevState => {\n\t\t\tconst clonedBoardStatus = JSON.parse(JSON.stringify(prevState.boardStatus));\n\t\t\tclonedBoardStatus[r][c] = !clonedBoardStatus[r][c];\n\t\t\treturn clonedBoardStatus;\n\t    };\n\n\t\tthis.setState(prevState => ({\n\t\t\tboardStatus: toggleBoardStatus(prevState)\n\t\t}));\n\t}\n\n\thandleStep = () => {\n\t\tconst nextStep = prevState => {\n\t\t\tconst boardStatus = prevState.boardStatus;\n\n\t\t\t/* Must deep clone boardStatus to avoid modifying it by reference when updating clonedBoardStatus.\n\t\t\tCan't use `const clonedBoardStatus = [...boardStatus]`\n\t\t\tbecause Spread syntax effectively goes one level deep while copying an array. \n\t\t\tTherefore, it may be unsuitable for copying multidimensional arrays.\n\t\t\tNote: JSON.parse(JSON.stringify(obj)) doesn't work if the cloned object uses functions */\n\t\t\tconst clonedBoardStatus = JSON.parse(JSON.stringify(boardStatus));\n\n\t\t\tconst amountTrueNeighbors = (r,c) => {\n\t\t\t\tconst neighbors = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n\t\t\t\treturn neighbors.reduce((trueNeighbors, neighbor) => {\n\t\t\t\t\tconst x = r + neighbor[0];\n\t\t\t\t\tconst y = c + neighbor[1];\n\t\t\t\t\tconst isNeighborOnBoard = (x >= 0 && x < totalBoardRows && y >= 0 && y < totalBoardColumns);\n\t\t\t\t\t/* No need to count more than 4 alive neighbors due to rules */\n\t\t\t\t\tif (trueNeighbors < 4 && isNeighborOnBoard && boardStatus[x][y]) {\n\t\t\t\t\t\treturn trueNeighbors + 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn trueNeighbors;\n\t\t\t\t\t}\n\t\t\t\t}, 0);\n\t\t\t};\n\n\t\t\tfor (let r = 0; r < totalBoardRows; r++) {\n\t\t\t\tfor (let c = 0; c < totalBoardColumns; c++) {\n\t\t\t\t\tconst totalTrueNeighbors = amountTrueNeighbors(r,c);\n\n\t\t\t\t\tif (!boardStatus[r][c]) {\n\t\t\t\t\t\tif (totalTrueNeighbors === 3) clonedBoardStatus[r][c] = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (totalTrueNeighbors < 2 || totalTrueNeighbors > 3) clonedBoardStatus[r][c] = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn clonedBoardStatus;\n\t\t};\n\n\t\tthis.setState(prevState => ({\n\t\t\tboardStatus: nextStep(prevState),\n\t\t\tgeneration: prevState.generation + 1\n\t\t}));\n\t}\n\n\thandleSpeedChange = newSpeed => {\n\t\tthis.setState({ speed: newSpeed });\n\t}\n\n\thandleRun = () => {\n\t\tthis.setState({ isGameRunning: true });\n\t}\n\n\thandleStop = () => {\n\t\tthis.setState({ isGameRunning: false });\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconst { isGameRunning, speed } = this.state;\n\t\tconst speedChanged = prevState.speed !== speed;\n\t\tconst gameStarted = !prevState.isGameRunning && isGameRunning;\n\t\tconst gameStopped = prevState.isGameRunning && !isGameRunning;\n\n\t\tif ((isGameRunning && speedChanged) || gameStopped) {\n\t\t\tclearInterval(this.timerID);\n\t\t}\n\n\t\tif ((isGameRunning && speedChanged) || gameStarted) {\n\t\t\tthis.timerID = setInterval(() => {\n\t\t\t\tthis.handleStep();\n\t\t\t}, speed);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { boardStatus, isGameRunning, generation, speed } = this.state;\n\n    \treturn (\n    \t\t<div>\n\t\t\t\t<h1>Game of Life</h1>\n\t\t\t\t<BoardGrid boardStatus={boardStatus} onToggleCellStatus={this.handleToggleCellStatus} />\n\t\t\t\t<div className='flexRow upperControls'>\n\t\t\t\t\t<span>\n\t\t\t\t\t\t{'+ '}\n\t\t\t\t\t\t<Slider speed={speed} onSpeedChange={this.handleSpeedChange} />\n\t\t\t\t\t\t{' -'}\n\t\t\t\t\t</span>\n\t\t\t\t\t{`Generation: ${generation}`}\n\t\t\t\t</div>\n\t\t\t\t<div className='flexRow lowerControls'>\n\t\t\t\t\t{this.runStopButton()}\n\t\t\t\t\t<button type='button' disabled={isGameRunning} onClick={this.handleStep}>Step</button>\n\t\t\t\t\t<button type='button' onClick={this.handleClearBoard}>Clear Board</button>\n\t\t\t\t\t<button type='button' onClick={this.handleNewBoard}>New Board</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}