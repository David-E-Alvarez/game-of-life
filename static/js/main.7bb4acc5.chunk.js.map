{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["totalBoardRows","totalBoardColumns","newBoardStatus","cellStatus","arguments","length","undefined","Math","random","grid","r","c","BoardGrid","_ref","boardStatus","onToggleCellStatus","tr","_loop","td","_loop2","push","react_default","a","createElement","key","concat","className","onClick","handleClick","App","state","generation","gameRunning","handleNewBoard","_this","setState","prevState","handleClearBoard","toggleCellStatus","toggleBoardStatus","tempBoardStatus","Object","toConsumableArray","handleStep","JSON","parse","stringify","amountTrueNeighbors","trueNeighbors","forEach","neighbor","x","y","totalTrueNeighbors","handleRun","timerID","setInterval","handleStop","clearInterval","runStopButton","type","_this$state","this","App_BoardGrid","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7bb4acc5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst totalBoardRows = 40;\nconst totalBoardColumns = 50;\n\nconst newBoardStatus = (cellStatus = () => Math.random() < 0.25) => {\n\tconst grid = [];\n\tfor (let r = 0; r < totalBoardRows; r++) {\n\t\tgrid[r] = [];\n\t\tfor (let c = 0; c < totalBoardColumns; c++) {\n\t\t\tgrid[r][c] = cellStatus();\n\t\t}\n\t}\n\treturn grid;\n};\n\nconst BoardGrid = ({ boardStatus, onToggleCellStatus }) => {\n\tfunction handleClick(r,c) {\n\t\tonToggleCellStatus(r,c);\n\t}\n\n\tconst tr = [];\n\tfor (let r = 0; r < totalBoardRows; r++) {\n  \t\tconst td = [];\n  \t\tfor (let c = 0; c < totalBoardColumns; c++) {\n    \t\ttd.push(\n\t\t        <td\n\t\t        \tkey={`${r},${c}`}\n\t\t\t\t\tclassName={boardStatus[r][c] ? 'alive' : 'dead'}\n\t\t\t\t\tonClick={() => handleClick(r,c)}\n\t\t\t\t/>\n    \t\t);\n  \t\t}\n  \t\ttr.push(<tr key={r}>{td}</tr>);\n\t}\n\treturn <table><tbody>{tr}</tbody></table>;\n};\n\nclass App extends Component {\n\tstate = {\n\t\tboardStatus: newBoardStatus(),\n\t\tgeneration: 0,\n\t\tgameRunning: false\n\t}\n\n\thandleNewBoard = () => {\n\t\tthis.setState(prevState => ({\n\t\t\tboardStatus: newBoardStatus(),\n\t\t\tgeneration: 0\n\t\t}));\n\t}\n\n\thandleClearBoard = () => {\n\t\tthis.setState(prevState => ({\n\t\t\tboardStatus: newBoardStatus(() => false),\n\t\t\tgeneration: 0\n\t\t}));\n\t}\n\n\ttoggleCellStatus = (r,c) => {\n\t    const toggleBoardStatus = prevState => {\n\t    \tconst tempBoardStatus = [...prevState.boardStatus]\n\t    \ttempBoardStatus[r][c] = !tempBoardStatus[r][c];\n\t    \treturn tempBoardStatus;\n\t    };\n\n\t\tthis.setState(prevState => ({\n\t\t\tboardStatus: toggleBoardStatus(prevState)\n\t\t}));\n\t}\n\n\thandleStep = (gameRunning = false) => {\n\t\tconst { boardStatus } = this.state;\n\n\t\t/* Must deep clone boardStatus to avoid modifying it by reference when updating newBoardStatus.\n\t\tCan't do `const newBoardStatus = [...boardStatus]` \n\t\tbecause Spread syntax effectively goes one level deep while copying an array. \n\t\tTherefore, it may be unsuitable for copying multidimensional arrays.\n\t\tNote: JSON.parse(JSON.stringify(oldObject)) doesn't work if the cloned object uses functions */\n\t\tconst newBoardStatus = JSON.parse(JSON.stringify(boardStatus));\n\n\t\tconst amountTrueNeighbors = (r,c) => {\n\t\t\tlet trueNeighbors = 0;\n\t\t\tconst neighbors = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n\t\t\tneighbors.forEach(neighbor => {\n\t\t\t\tconst x = r + neighbor[0];\n\t\t\t\tconst y = c + neighbor[1];\n\t\t\t\tconst isNeighborOnBoard = (x >= 0 && x < totalBoardRows && y >= 0 && y < totalBoardColumns);\n\t\t\t\t/* No need to count more than 4 alive neighbors */\n\t\t\t\tif (trueNeighbors < 4 && isNeighborOnBoard && boardStatus[x][y]) {\n\t\t\t\t\ttrueNeighbors++;\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn trueNeighbors;\n\t\t}\n\n\t\tfor (let r = 0; r < totalBoardRows; r++) {\n\t\t\tfor (let c = 0; c < totalBoardColumns; c++) {\n\t\t\t\tconst totalTrueNeighbors = amountTrueNeighbors(r,c);\n\n\t\t\t\tif (!boardStatus[r][c]) {\n\t\t\t\t\tif (totalTrueNeighbors === 3) newBoardStatus[r][c] = true;\n\t\t\t\t} else {\n\t\t\t\t\tif (totalTrueNeighbors < 2 || totalTrueNeighbors > 3) newBoardStatus[r][c] = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.setState(prevState => ({\n\t\t\tboardStatus: newBoardStatus,\n\t\t\tgameRunning: gameRunning,\n\t\t\tgeneration: prevState.generation + 1\n\t\t}));\n\t}\n\n\thandleRun = () => {\n\t\t/*  Prevent user from starting more than 1 timer simultaneously */\n\t\tif (this.timerID) return;\n\t\tthis.timerID = setInterval(() => {this.handleStep(true)}, 1000);\n\t}\n\n\thandleStop = () => {\n\t\tclearInterval(this.timerID);\n\t\t/* Remove this.timerID value so a timer can be restarted */\n\t\tthis.timerID = undefined;\n\t\tthis.setState(prevState => ({gameRunning: false}));\n\t}\n\n\trunStopButton = () => {\n\t\treturn this.state.gameRunning ?\n\t\t<button type='button' onClick={this.handleStop}>Stop</button> :\n\t\t<button type='button' onClick={this.handleRun}>Run</button>;\n\t}\n\n\trender() {\n\t\tconst { boardStatus, generation } = this.state;\n\n    \treturn (\n    \t\t<div>\n    \t\t\t<h2>Game of Life</h2>\n    \t\t\t<BoardGrid\n    \t\t\t\tboardStatus={boardStatus}\n    \t\t\t\tonToggleCellStatus={this.toggleCellStatus}\n    \t\t\t/>\n    \t\t\t{`Generation: ${generation}`}\n\t      \t\t<button type='button' onClick={this.handleNewBoard}>New Board</button>\n\t      \t\t<button type='button' onClick={this.handleClearBoard}>Clear Board</button>\n\t      \t\t{this.runStopButton()}\n\t      \t\t<button type='button' onClick={this.handleStep}>Step</button>\n      \t\t</div>\n    \t);\n  \t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}